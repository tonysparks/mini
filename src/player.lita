import "common"
import "raylib"
import "animation"
import "model"
import "game"
import "terrain"
import "io"

public struct Player {
    pos: using Vec2
    prevPos: Vec2
    vel: Vec2
    collisionBounds: Rectangle
    headCollisionBounds: Rectangle
    
    texture: Texture2D
    model: [PlayerState.COUNT]StateModel
    state: PlayerState
    movementFlag: MovementType
    lastFacing: MovementType
    

    frameWidth: f32
    frameHeight: f32

    frameTime: Time

    // jumping
    onGround: bool
    wasOnGround: bool
    moveTime: Time
    jumpAcc: Vec2
    gravity: Vec2
}

enum MovementType {
    MoveLeft = (1<<0),
    MoveRight= (1<<1),

}

public enum PlayerState {
    IDLE,
    RUNNING,
    JUMPING,
    FALLING,

    COUNT
}

public func PlayerInit(p: Player*) {
    // TODO: Create Asset Manager
    var tex = LoadTexture("../assets/hero_animation.png");

    var COLS = 12
    var ROWS = 3
    
    p.frameWidth = tex.width  / COLS;
    p.frameHeight = tex.height / ROWS;
    
    p.pos.x -= p.frameWidth/2.0f;
    p.pos.y -= p.frameHeight/2.0f;

    p.texture = tex;
    p.state = PlayerState.IDLE;
    p.onGround = false;
    p.wasOnGround = false;

    p.gravity.x = GRAVITY.x
    p.gravity.y = GRAVITY.y

    p.collisionBounds.width  = 16
    p.collisionBounds.height = 32
    p.headCollisionBounds.width  = 16
    p.headCollisionBounds.height = 8


    const frameTime = 30_i64;

    // IDLE
    {
        var m = &p.model[PlayerState.IDLE]
        StateModelInit(m, frameTime, 1)        
        m.sprites[0] = Sprite {
            .tex = tex,
            .region = Rectangle {
                .x = p.frameWidth * 4,
                .y = p.frameHeight * 2,
                .width = p.frameWidth,
                .height = p.frameHeight
            }
        }
    }

    // RUN
    {
        var m = &p.model[PlayerState.RUNNING]
        StateModelInit(m, frameTime, 12)
        m.anim.loop = true

        for(var i = 0; i < 12; i+=1) {
            m.sprites[i] = Sprite {
                .tex = tex,
                .region = Rectangle {
                    .x = p.frameWidth * i,
                    .y = p.frameHeight * 0,
                    .width = p.frameWidth,
                    .height = p.frameHeight
                }
            }
        }
    }
    // JUMP
    {
        var m = &p.model[PlayerState.JUMPING]
        StateModelInit(m, frameTime, 20)
        m.anim.loop = true

        for(var i = 0; i < 20; i+=1) {
            m.sprites[i] = Sprite {
                .tex = tex,
                .region = Rectangle {
                    .x = p.frameWidth  * (i % 12),
                    .y = p.frameHeight * (0 + (i > 12 ? 2 : 1)),
                    .width = p.frameWidth,
                    .height = p.frameHeight
                }
            }
        }
    }
    // FALLING
    {
        var m = &p.model[PlayerState.FALLING]
        StateModelInit(m, frameTime, 1)
        m.anim.loop = true

        
        m.sprites[0] = Sprite {
            .tex = tex,
            .region = Rectangle {
                .x = p.frameWidth * 7,
                .y = p.frameHeight * 1,
                .width = p.frameWidth,
                .height = p.frameHeight
            }
        }
        
    }

    PlayerSetState(p, PlayerState.IDLE)
}

public func PlayerDestroy(p: Player*) {
    // TODO
}

public func PlayerMoveLeft(p: Player*) {
    p.vel.x = -1
}

public func PlayerMoveRight(p: Player*) {
    p.vel.x = 1
}

public func PlayerJump(p: Player*) {
    p.vel.y = -1
}

public func PlayerUpdate(p: Player*, game: Game*, timeStep: TimeStep*) {
    p.frameTime += timeStep.frameTime
    p.moveTime -= timeStep.frameTime

    p.movementFlag = 0
    p.prevPos = p.pos

    if(p.onGround) {
        PlayerSetState(p, PlayerState.IDLE)
    }

    if(Vector2Length2(p.vel) > 0) {
        if(p.vel.x > 0) {
            p.movementFlag |= MovementType.MoveRight
            p.lastFacing = p.movementFlag

            PlayerSetState(p, PlayerState.RUNNING)
        }
        else if(p.vel.x < 0) {
            p.movementFlag |= MovementType.MoveLeft
            p.lastFacing = p.movementFlag

            PlayerSetState(p, PlayerState.RUNNING)
        }

        if(p.vel.y < 0 && p.onGround && p.moveTime <= 0) {
            PlayerSetState(p, PlayerState.JUMPING)
            p.moveTime = 580_i64
            p.jumpAcc.x = 0
            p.jumpAcc.y = -1600f
        }
    }

    var dt = timeStep.frameTimeFraction
    var speedX = 140f
    var speedY = 1f

    // if the player is in the air; apply gravity
    if( (!p.onGround && p.moveTime > 0) || p.state == PlayerState.JUMPING) {
        p.vel.y = p.jumpAcc.y
        p.jumpAcc.y *= 0.76f
        
        speedX += 50f

        PlayerSetState(p, PlayerState.JUMPING)
        p.gravity.y += 24f
    }
    else if(!p.onGround || p.state == PlayerState.FALLING) {
        p.gravity.y += 24f
    }

    var d = Vec2 {0,0}
    d.x = (p.vel.x * speedX * dt)
    d.y = (p.vel.y * speedY * dt) + (p.gravity.y * dt)

    RectSetPosV(&p.collisionBounds, p.pos)

    var xMove: f32 = ABS(d.x) as (i32)
    var xDelta: f32 = d.x < 0 ? -1 : 1
    var xPos: f32 = p.pos.x

    while(xMove > 0) {
        xPos += xDelta
        p.collisionBounds.x = xPos

        if(TerrainRectCollides(&game.terrain, &p.collisionBounds)) {
            xPos -= xDelta
            break;
        }

        xMove -= 1
    }

    p.pos.x = xPos
    p.collisionBounds.x = xPos


    var yMove: f32 = ABS(d.y) as (i32)
    var yDelta: f32 = d.y < 0 ? -1 : 1
    var yPos: f32 = p.pos.y

    while(yMove > 0) {
        yPos += yDelta
        p.collisionBounds.y = yPos

        p.onGround = false

        if(TerrainRectCollides(&game.terrain, &p.collisionBounds)) {

            p.headCollisionBounds.x = xPos
            p.headCollisionBounds.y = yPos// + 8
            if(TerrainRectCollides(&game.terrain, &p.headCollisionBounds)) {
                PlayerSetState(p, PlayerState.FALLING)        
                p.onGround = false
                p.gravity.y = GRAVITY_Y/4f
                p.jumpAcc.y = 0
            }
            else {
                if(!p.wasOnGround) {
                    p.moveTime = 80
                }
                p.onGround = true
                p.gravity.y = GRAVITY_Y
            }

            yPos -= yDelta
            StateModelReset(&p.model[PlayerState.JUMPING])
            break;
        }

        yMove -= 1
    }

    p.wasOnGround = p.onGround

    if(p.pos.y != yPos && p.state != PlayerState.JUMPING) {
        PlayerSetState(p, PlayerState.FALLING)
    }

    p.pos.y = yPos;
    if(p.pos.y < 0) {
        p.pos.y = 0
        p.onGround = true
        StateModelReset(&p.model[PlayerState.JUMPING])
    }

    var m = &p.model[p.state]
    animationUpdate(&m.anim, timeStep)
    
    p.vel.x = 0
    p.vel.y = 0
}

public func PlayerSetState(p: Player*, s: PlayerState) {
    p.state = s;
    var anim = &p.model[s].anim
    animationPlay(anim)
}

public func PlayerDraw(p: Player*) {
    var m = &p.model[p.state]
    var anim = &m.anim
        
    if(anim.numberOfFrames > 0) {
        var frame = animationCurrentFrame(anim)
        
        var r = m.sprites[frame].region
        if(p.movementFlag) {
            if(p.movementFlag & MovementType.MoveLeft) {
                r.width *= -1
            }
        }
        else {
            if(p.lastFacing & MovementType.MoveLeft) {
                r.width *= -1
            }
        }

        var pos = Vec2{p.pos.x - 8, p.pos.y}
        DrawTextureRec(p.texture, r, pos, WHITE);
    }

    if(false)
    { // Debug draw
        var pos = Vec2{20,100}
        for(var i = 0; i < m.numOfSprites; i+=1) {
            var r = m.sprites[i].region
            DrawTextureRec(p.texture, r, pos, WHITE);
            pos.x += r.width + 5
        }
    }
}