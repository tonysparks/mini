import "common";
import "io"

public struct Animation {
    numberOfFrames: i32
    elapsedTime: Time
    frameTime: Time
    currentFrame: i32
    loop: bool
    isPaused: bool
} 

public func animationUpdate(anim: using Animation*, timeStep: TimeStep*) : i32 {
    if(isPaused) {
        return currentFrame;
    }

    elapsedTime += timeStep.frameTime;
    
    if(elapsedTime > frameTime) {
        elapsedTime -= frameTime;

        var desiredFrame = currentFrame + 1;

        if(!loop && desiredFrame >= numberOfFrames) {
            desiredFrame = numberOfFrames - 1;
        }

        animationSetCurrentFrame(anim, desiredFrame);
    }

    return currentFrame;
}

public func animationPlay(anim: using Animation*) {
    isPaused = false
}

public func animationStop(anim: using Animation*) {
    isPaused = true
    elapsedTime = 0;
    currentFrame = 0;
}

public func animationPause(anim: using Animation*) {
    isPaused = 1;
}

public func animationResume(anim: using Animation*) {
    isPaused = 0;
}

public func animationReset(anim: using Animation*) {
    elapsedTime = 0;
    currentFrame = 0;
}

public func animationIsPaused(anim: using Animation*) : i32 {
    return isPaused;
}

public func animationIsDone(anim: using Animation*) : i32 {
    return !loop && currentFrame >= (numberOfFrames - 1);
}

public func animationCurrentFrame(anim: using Animation*) : i32 {
    return currentFrame;
}

public func animationNumberOfFrames(anim: using Animation*) : i32 {
    return numberOfFrames;
}

public func animationSetCurrentFrame(anim: using Animation*, frameNumber: i32) {
    currentFrame = frameNumber % numberOfFrames;
}