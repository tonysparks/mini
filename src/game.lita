import "io";
import "raylib";
import "raygui";
import "animation";
import "common";
import "input_system";
import "console";
import "terrain";
import "camera";
import "math";
import "string_buffer";
import "mem";
import "entity";
import "gang";
import "building";

public const MAX_BUILDINGS = 32
public const MAX_GANGS = 4

struct Gui {
    building: Building*
    closed: bool
    buffer: StringBuffer
    font: Font
}

public struct Game {
    camera: GameCamera
    guiCamera: Camera2D
    terrain: Terrain

    gui: Gui

    buildings: [MAX_BUILDINGS]Building
    numOfBuildings: i32

    gangs: [MAX_GANGS]Gang
    numOfGangs: i32

    selectedUnit: Entity*
}

const game = Game{}

func GameOnMouseEvent(event: MouseEvent*) : bool {   
    var pos = GetCursorPos()

    if (event.type == EventType.PRESSED && event.button == MouseButton.MOUSE_LEFT_BUTTON) {  
        if(GameSelectEntity(pos)) {
            return true
        }
        else {
            game.selectedUnit = null
        }
    }

    return false
}

func GameSelectEntity(pos: Vec2) : bool {

    for(var i = 0; i < game.numOfGangs; i+=1) {
        var g = &game.gangs[i]
        for(var m = 0; m < g.members.size(); m+=1) {
            var member = g.members.get(m)
            if(member.bounds.containsV(pos)) {                
                game.selectedUnit = &member.entity
                return true
            }
        }
    }

    for(var i = 0; i < game.numOfBuildings; i+=1) {
        var b = &game.buildings[i]
        if(b.bounds.containsV(pos)) {
            game.gui.building = b
            game.gui.closed = false
            game.selectedUnit = &b.entity
            return true
        }
    }

    return false
}

func GameOnKeyEvent(event: KeyEvent*) : bool {
    if (event.type == EventType.RELEASED && event.keyCode == KeyboardKey.KEY_SPACE) {        
        return true;
    }
    return false
}

public func GameInit() {
    game.camera.init()

    game.guiCamera = Camera2D {
        .offset: Vec2{0,0}, 
        .target: Vec2{0,0},
        .rotation: 0,
        .zoom: 1f,
    }

    game.gui.buffer.init(32)
    game.gui.building = null
    game.gui.font = LoadFont("../assets/Consola.ttf")

    var filename = "../assets/mini_city.json"
        //"../assets/level2.txt"
    var data : char* = null
    var status = readFile(filename, &data);
    if(status != FileStatus.Ok) {
        log(LogLevel.FATAL, "*** Unable to open %s\n", filename)
    }

    game.selectedUnit = null

    // TEMP
    game.gangs[0].init("Three One's");
    game.gangs[1].init("Lord's");
    game.gangs[2].init("Disciple's");
    game.numOfGangs = 3

    var member = new<GangMember>()
    member.init(Vec2{10,1})

    var gang = &game.gangs[0]
    gang.addMember(member)
    
    /*
    game.buildings[0] = Building {
        .name: "4647 S. 31st St.",
        .entity: Entity {
            .type = EntityType.BUILDING,
            .bounds: Rectangle{256, 192, 128, 160},
        },
        .loyalty: 32,
        .activities: (Activity.DRUGS|Activity.ARMS),
        .affiliated: &game.gangs[0],
    }
    game.numOfBuildings = 1 */
    // END TEMP

    game.terrain.init(data, &game)

    InputSysRegisterMouseHandler(&GameOnMouseEvent)
    InputSysRegisterKeyboardHandler(&GameOnKeyEvent)
}

public func GameGetGang(str: char const*) : Gang* {
    for(var i = 0; i < game.numOfGangs; i+=1) {
        var g = &game.gangs[i]
        if(strcmp(g.name, str) == 0) {
            return g;
        }
    }

    return null;
}

public func GameDestroy() {    
    game.terrain.destroy()
    game.gui.buffer.free()

    for(var i = 0; i < game.numOfGangs; i+=1) {
        var g = &game.gangs[i]
        g.destroy()
    }

}

public func GameUpdate(timeStep: TimeStep*) {
    game.camera.update(timeStep, &game)

    for(var i = 0; i < game.numOfGangs; i += 1) {
        var g = &game.gangs[i]
        g.update(timeStep)
    }
}




public func GameDraw() {
    BeginMode2D(game.camera.camera)
    {
        game.terrain.draw(&game.camera)            
        for(var i = 0; i < game.numOfGangs; i += 1) {
            var g = &game.gangs[i]
            g.draw()
        }
        
    }
    EndMode2D()

    BeginMode2D(game.guiCamera)
    {
        DrawGui()
    }
    EndMode2D()
}

func DrawGui() {    
    GuiFont(game.gui.font)
    
    DrawGangMemberInfoGui()
    DrawBuildingInfoGui()
    DrawAvailableCommands()
}

func GetCursorPos() : Vec2 {
    var pos = Vector2Subtract(GetMousePosition(), game.camera.camera.offset) 
    return pos
}

func GetLoyaltyColor(loyalty: i32) : i32 {
    if(loyalty < 30) {
        return 0xff0000ff
    }
    else if(loyalty < 60) {
        return 0xffa500ff
    }
    else {
        return 0x00ff00ff
    }
}


func DrawAvailableCommands() {
    if(game.selectedUnit == null) {
        return;
    }
    
    var g = &game.gui
    var x = 10
    var y = 115


    GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, 0x000000ff)
    GuiSetStyle(GuiControl.DEFAULT, GuiDefaultProperty.TEXT_SIZE, 12)

    var isClosed = GuiWindowBox(Rectangle{ gameScreenWidth - 250, 5, 240, 400 }, "Available Commands");
    if(isClosed) {
        game.selectedUnit = null;
        return;
    }

    {
        GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, 0x000000ff)
        g.buffer.append("Name:")
        GuiLabel(Rectangle{ x+10, y+50, 100, 25 }, g.buffer.cStr()); 
        g.buffer.clear()

        GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, 0xff0000ff)    
        g.buffer.append("%s", EntityTypeAsStr(game.selectedUnit.type))
        GuiLabel(Rectangle{ x+130, y+50, 100, 25 }, g.buffer.cStr()); 
        g.buffer.clear()
    }
}

func DrawGangMemberInfoGui() {
    var pos = GetCursorPos()

    var gangMember: GangMember* = null
    for(var i = 0; i < game.numOfGangs; i+=1) {
        var g = &game.gangs[i]
        for(var m = 0; m < g.members.size(); m+=1) {
            var member = g.members.get(m)
            if(member.bounds.containsV(pos)) {
                gangMember = member
                goto skip;
            }
        }
    }

skip:
    if(!gangMember) {
        return;
    }

    var g = &game.gui

    GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, 0x000000ff)
    GuiSetStyle(GuiControl.DEFAULT, GuiDefaultProperty.TEXT_SIZE, 12)

    var x = (gangMember.bounds.x - game.camera.camera.offset.x)
    var y = (gangMember.bounds.y - game.camera.camera.offset.y) + 15

    if(y < 40) {
        y = 40
    }

    if(x < 10) {
        x = 10
    }

    if(y > GetScreenHeight() - 100) {
        y = GetScreenHeight() - 130
    }

    if(x > GetScreenWidth() - 250) {
        x = GetScreenWidth() - 250
    }

    {
        g.buffer.append("Loyalty:")
        GuiLabel(Rectangle{ x+10, y+30, 100, 25 }, g.buffer.cStr()); 
        g.buffer.clear()

        GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, GetLoyaltyColor(gangMember.loyalty))
        g.buffer.append("%d / 100", gangMember.loyalty)
        GuiLabel(Rectangle{ x+130, y+30, 100, 25 }, g.buffer.cStr());
        g.buffer.clear()
    }

    {
        GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, 0x000000ff)
        g.buffer.append("Affiliated with:")
        GuiLabel(Rectangle{ x+10, y+50, 100, 25 }, g.buffer.cStr()); 
        g.buffer.clear()

        GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, 0xff0000ff)    
        g.buffer.append("%s", (gangMember.affiliated != null) ? gangMember.affiliated.name as (char*) : "--")
        GuiLabel(Rectangle{ x+130, y+50, 100, 25 }, g.buffer.cStr()); 
        g.buffer.clear()
    }
}

func DrawBuildingInfoGui() {
    var g = &game.gui
    if(g.closed || !g.building) {
        return;
    }

    GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, 0x000000ff)
    GuiSetStyle(GuiControl.DEFAULT, GuiDefaultProperty.TEXT_SIZE, 12)

    g.closed = GuiWindowBox(Rectangle{ 5, 5, 240, 400 }, g.building.name);
    
    {   
        g.buffer.append("Loyalty:")
        GuiLabel(Rectangle{ 10, 30, 100, 25 }, g.buffer.cStr()); 
        g.buffer.clear()

        GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, GetLoyaltyColor(g.building.loyalty))
        g.buffer.append("%d / 100", g.building.loyalty)
        GuiLabel(Rectangle{ 130, 30, 100, 25 }, g.buffer.cStr());
        g.buffer.clear()
    }

    {
        GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, 0x000000ff)
        g.buffer.append("Affiliated with:")
        GuiLabel(Rectangle{ 10, 50, 100, 25 }, g.buffer.cStr()); 
        g.buffer.clear()

        GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, 0xff0000ff)    
        g.buffer.append("%s", (g.building.affiliated != null) ? g.building.affiliated.name as (char*) : "--")
        GuiLabel(Rectangle{ 130, 50, 100, 25 }, g.buffer.cStr()); 
        g.buffer.clear()
    }

    var a = g.building.activities
    var x = 15
    var y = 90
    
    GuiSetStyle(GuiControl.LABEL, GuiControlProperty.TEXT_COLOR_NORMAL, 0x000000ff)

    GuiLock()
    GuiCheckBox(Rectangle{ x, y, 15, 15 }, "Drug House", a & Activity.DRUGS);
    y += 25
    GuiCheckBox(Rectangle{ x, y, 15, 15 }, "Prostitution Ring", a & Activity.PROSTITUTION);
    y += 25
    GuiCheckBox(Rectangle{ x, y, 15, 15 }, "Arms", a & Activity.ARMS);
    y += 25
    GuiCheckBox(Rectangle{ x, y, 15, 15 }, "Money Laundering", a & Activity.LAUNDER);
    y += 25
    GuiCheckBox(Rectangle{ x, y, 15, 15 }, "Safe Haven", a & Activity.HAVEN);
    y += 25
    GuiUnlock()
}