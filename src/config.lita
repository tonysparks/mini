import "common"
import "io"
import "mem"

public const MAX_ERROR_MSG_LEN = 128
public enum ConfigStatus {
    OK,
    ERROR,
}

public struct Config {
    data: char const*
    current: char const*
    alloc: Allocator const*

    status:  ConfigStatus
    error: [MAX_ERROR_MSG_LEN]char const;
    entries: ConfigEntry*
}

public struct ConfigString {
    str: char const*
    len: i32
}

public struct ConfigEntry {
    ident: Token
    value: Token

    next: ConfigEntry*
}

public enum TokenType {
    IDENTIFIER,
    EQUALS,
    VALUE,
    EOF,

    MAX
}

public const tokenStr = [TokenType.MAX]char const* {
    [TokenType.IDENTIFIER] = "IDENTIFIER",
    [TokenType.EQUALS] = "EQUALS",
    [TokenType.VALUE] = "VALUE",
    [TokenType.EOF] = "EOF",
}

public struct Token {
    type: TokenType
    start: char const*
    len: i32
}

func LeftTrim(s: char const*) : char const* {
    while(*s) {
        if(!isspace(*s)) {
            break;
        }

        s += 1
    }

    return s
}

func RightTrim(s: char const*, len: i32) : i32 {    
    var newLen = len
    while(newLen > 0 && isspace(s[newLen - 1])) {
        newLen -= 1
    }

    return newLen
}

func ConfigNext(s: Config*) : Token {
    var inValue = false
    var inComment = false
    var start : char const* = s.current
    
    var data = s.current
    defer (s.current = data + 1)

    while(*data) {
        var c = *data
        if(c == '\n') {
            inComment = false
            if(!inValue) {
                start = data
            }
        }
        else {
            if(inComment) {
                data += 1
                continue;
            }

            if(c == '=') {
                if(!inValue) {
                    start = LeftTrim(start)
                    return Token {
                        TokenType.IDENTIFIER,
                        start,
                        RightTrim(start, (data - start) as (i32))    
                    }
                }
            }
            else if(c == '/') {
                var peekChar = *(data + 1)
                if(peekChar == '/') {
                    inComment = true
                }
            }
            else if(c == '{') {
                inValue = true
                start = data + 1
            }
            else if(c == '}') {
                inValue = false
                start = LeftTrim(start)
                return Token {
                    TokenType.VALUE,
                    start,
                    RightTrim(start, (data - start) as (i32))
                }
            }
        }

        data += 1
    }

    return Token {
        TokenType.EOF,
        null,
        0
    }
}

func configError(config: Config*, msg: char const*) {
    config.status = ConfigStatus.ERROR;
    var len = strlen(msg)
    memcpy(config.error as (void*), msg as (void*), MIN(len as (i32), MAX_ERROR_MSG_LEN))
}

public func ParseConfig(config: Config*, rawdata: char const*, alloc: Allocator const* = null) {
    if(!alloc) {
        alloc = cAllocator;
    }


    config.data = rawdata;
    config.current = rawdata;
    config.alloc = alloc;
    config.status = ConfigStatus.OK;
    config.entries = null;

    var current : ConfigEntry* = null
    do {
        var ident = ConfigNext(config)
        //printf("Token '%s'  value: '%.*s'\n", tokenStr[ident.type], ident.len, ident.start);
        if(ident.type == TokenType.EOF) {
            break;
        }

        if(ident.type != TokenType.IDENTIFIER) {
            configError(config, "must specify an identifier")
            break;
        }

        var value = ConfigNext(config)        
        if(value.type != TokenType.VALUE) {
            configError(config, "missing or incorrect value structure")
            break;
        }

        var entry = new<ConfigEntry>(config.alloc);
        entry.ident = ident
        entry.value = value
        entry.next = null

        if(!config.entries) {
            config.entries = entry
            current = entry
        }
        else {
            current.next = entry
            current = entry            
        }

       // printf("Token '%s'  value: '%.*s'\n", tokenStr[token.type], token.len, token.start);
    } while(true)
}

public func ConfigDestroy(config: Config*) {
    var entries = config.entries;
    while(entries) {
        var current = entries
        entries = entries.next

        config.alloc.free(current as (void*))
    }
}

public func ConfigGetEntry(config: Config*, entryName: char const*) : ConfigEntry* {
    var entries = config.entries;
    while(entries) {
        var current = entries
        if(strncmp(entryName, current.ident.start, current.ident.len) == 0) {
            return current;
        }

        entries = entries.next
    }

    return null;
}

public func ConfigGetEntryValueAsInt(config: Config*, entryName: char const*, defaultValue: i32 = 0) : i64 {
    var entry = ConfigGetEntry(config, entryName)
    if(!entry) {
        return defaultValue;
    }

    return strtol(entry.value.start, null, 10);
}

public func ConfigGetEntryValueAsFloat(config: Config*, entryName: char const*, defaultValue: i32 = 0) : f64 {
    var entry = ConfigGetEntry(config, entryName)
    if(!entry) {
        return defaultValue;
    }

    return strtod(entry.value.start, null);
}

public func ConfigGetEntryValueAsString(config: Config*, entryName: char const*, str: char*, max: i32) : char* {
    var entry = ConfigGetEntry(config, entryName)
    if(!entry) {
        if(max > 0) {
            str[0] = '\0'
        }

        return str;
    }

    var len = MIN(entry.value.len, max - 1) as (i64);
    memcpy(str as (void*), entry.value.start as (void*), len);
    str[len] = '\0'

    return str;
}



public func ConfigEntryAsInt(entry: ConfigEntry*, defaultValue: i32 = 0) : i64 {    
    if(!entry) {
        return defaultValue;
    }

    return strtol(entry.value.start, null, 10);
}

public func ConfigEntryAsFloat(entry: ConfigEntry*, defaultValue: i32 = 0) : f64 {
    if(!entry) {
        return defaultValue;
    }

    return strtod(entry.value.start, null);
}

public func ConfigEntryAsString(entry: ConfigEntry*, str: char*, max: i32) : i32 {    
    if(!entry) {
        return 0;
    }

    var len = MIN(entry.value.len, max - 1) as (i64);
    memcpy(str as (void*), entry.value.start as (void*), len);
    str[len] = '\0'

    return len as (i32);
}

public func ConfigPrint(config: Config*) {    
    var current = config.entries
    while(current) {
        var ident = current.ident
        var value = current.value
        current = current.next
        printf("'%.*s' = '%.*s'\n", ident.len, ident.start, value.len, value.start);
    }
}