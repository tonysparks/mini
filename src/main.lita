import "io";
import "raylib";
import "animation";
import "common";
import "input_system";
import "console";
import "game";
import "wren";
import "script_system";

var isRunning = false;

func CmdQuit(args: char const*) {
    isRunning = false;
}

func Update(timeStep: TimeStep*) {    
    InputSysUpdate(timeStep);
    ConsoleUpdate(timeStep);

    GameUpdate(timeStep)
}

func Draw() {
    GameDraw();
    ConsoleDraw();
}

func main(len: i32, args: char**) : i32 {
    InitWindow(800, 450, "Mini-Game");
    defer CloseWindow();
    
    InitAudioDevice();
    defer CloseAudioDevice();
    
    InputSysInit();
    defer InputSysDestroy();

    ConsoleInit();
    defer ConsoleDestroy();
    
    ConsoleAddCommand("quit", CmdQuit)
    ConsoleAddCommand("exit", CmdQuit)

    ScriptInit();
    defer ScriptDestroy();

    GameInit();
    defer GameDestroy();



    SetTargetFPS(133);
    SetMasterVolume(0.2f)
    
    var gameClock : Time = 0_i64;
    var currentTime = GetTicks()
    var accumulator = 0_i64
    var previousTime : Time = 0_i64

    const maxIterations = 5
    const maxDelta = 250_i64
    const frameRate = 30_i64
    const dt = 1000_i64 / frameRate

    const timeStep = TimeStep {
        .frameTime: dt,
        .gameClock: gameClock,
        .frameTimeFraction: dt / 1000_f64
    }

    isRunning = true;
    while(!WindowShouldClose() && isRunning) {
        var newTime = GetTicks()
        var deltaTime = newTime - currentTime;

        // don't let the game get too far behind
        if(deltaTime > maxDelta) {
            deltaTime = maxDelta;
        }

        // Keep the game logic running at a fix time step
        if(deltaTime >= dt) {
            currentTime = newTime
            accumulator += deltaTime
            var iteration = 0

            while(accumulator >= dt && iteration < maxIterations) {
                timeStep.gameClock = gameClock

                Update(&timeStep)

                gameClock   += dt
                accumulator -= dt
                iteration   += 1
            }
        }       
        
        BeginDrawing();
            ClearBackground(BLACK);
            Draw();
        EndDrawing();
    }    
}