import "io";
import "raylib";
import "animation";
import "common";
import "input_system";
import "console";
import "game";
import "wren";
import "script_system";

import "string_buffer";
import "json";

var isRunning = false;
var windowScreenWidth = 640
var windowScreenHeight = 480
var gameScreenWidth = 640
var gameScreenHeight = 480
var frameBuffer: RenderTexture2D

func CmdQuit(args: char const*) {
    isRunning = false;
}

func Update(timeStep: TimeStep*) {    
    InputSysUpdate(timeStep);
    ConsoleUpdate(timeStep);

    GameUpdate(timeStep)
}

func DrawFrameBuffer() {
    // Draw RenderTexture2D to window, properly scaled
    var tex = frameBuffer.texture
    var scale = MIN( (GetScreenWidth()  as (f32) / gameScreenWidth  as (f32)) as (f32), 
                     (GetScreenHeight() as (f32) / gameScreenHeight as (f32)) as (f32))


    var w = gameScreenWidth  as (f32) * scale
    var h = gameScreenHeight as (f32) * scale

    var x = (GetScreenWidth()  - w) * 0.5f
    var y = (GetScreenHeight() - h) * 0.5f

    DrawTexturePro(tex, 
                  Rectangle { 0.0f, 0.0f, tex.width as (f32), -tex.height as (f32) },
                  Rectangle { x, y, w, h },                   
                  Vec2 { 0, 0 }, 
                  0.0f, 
                  WHITE);
}

func Draw() {
    GameDraw();
    ConsoleDraw();
}

func main(len: i32, args: char**) : i32 {
    SetConfigFlags(ConfigFlag.FLAG_WINDOW_RESIZABLE|ConfigFlag.FLAG_VSYNC_HINT)

    InitWindow(windowScreenWidth, windowScreenHeight, "Mini-Game");
    defer CloseWindow();
    
    InitAudioDevice();
    defer CloseAudioDevice();
    
    InputSysInit();
    defer InputSysDestroy();

    ConsoleInit();
    defer ConsoleDestroy();
    
    ConsoleAddCommand("quit", CmdQuit)
    ConsoleAddCommand("exit", CmdQuit)

    ScriptInit();
    defer ScriptDestroy();

    GameInit();
    defer GameDestroy();

    frameBuffer = LoadRenderTexture(gameScreenWidth, gameScreenHeight)    
    defer UnloadRenderTexture(frameBuffer)

    SetTextureFilter(frameBuffer.texture, TextureFilterMode.FILTER_BILINEAR)


    SetTargetFPS(133);
    SetMasterVolume(0.02f)
    
    var gameClock : Time = 0_i64;
    var currentTime = GetTicks()
    var accumulator = 0_i64
    var previousTime : Time = 0_i64

    const maxIterations = 5
    const maxDelta = 250_i64
    const frameRate = 30_i64
    const dt = 1000_i64 / frameRate

    const timeStep = TimeStep {
        .frameTime: dt,
        .gameClock: gameClock,
        .frameTimeFraction: dt as (f64) / 1000_f64
    }

    isRunning = true;
    while(!WindowShouldClose() && isRunning) {
        var newTime = GetTicks()
        var deltaTime = newTime - currentTime;

        // don't let the game get too far behind
        if(deltaTime > maxDelta) {
            deltaTime = maxDelta;
        }

        // Keep the game logic running at a fix time step
        if(deltaTime >= dt) {
            currentTime = newTime
            accumulator += deltaTime
            var iteration = 0

            while(accumulator >= dt && iteration < maxIterations) {
                timeStep.gameClock = gameClock

                Update(&timeStep)

                gameClock   += dt
                accumulator -= dt
                iteration   += 1
            }
        }       
        
        BeginTextureMode(frameBuffer)
            ClearBackground(BLACK)
            Draw()
        EndTextureMode()

        BeginDrawing()
            ClearBackground(BLACK)
            DrawFrameBuffer()
        EndDrawing()
    }    
}