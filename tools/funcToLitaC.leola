var input = """
// Global gui modification functions
RAYGUIDEF void GuiEnable(void);                                         // Enable gui controls (global state)
RAYGUIDEF void GuiDisable(void);                                        // Disable gui controls (global state)
RAYGUIDEF void GuiLock(void);                                           // Lock gui controls (global state)
RAYGUIDEF void GuiUnlock(void);                                         // Unlock gui controls (global state)
RAYGUIDEF void GuiState(int state);                                     // Set gui state (global state)
RAYGUIDEF void GuiFont(Font font);                                      // Set gui custom font (global state)
RAYGUIDEF void GuiFade(float alpha);                                    // Set gui controls alpha (global state), alpha goes from 0.0f to 1.0f

// Style set/get functions
RAYGUIDEF void GuiSetStyle(int control, int property, int value);       // Set one style property
RAYGUIDEF int GuiGetStyle(int control, int property);                   // Get one style property

// GuiTextBox() extended functions
RAYGUIDEF void GuiTextBoxSetActive(Rectangle bounds);                   // Sets the active textbox
RAYGUIDEF Rectangle GuiTextBoxGetActive(void);                          // Get bounds of active textbox
RAYGUIDEF void GuiTextBoxSetCursor(int cursor);                         // Set cursor position of active textbox
RAYGUIDEF int GuiTextBoxGetCursor(void);                                // Get cursor position of active textbox
RAYGUIDEF void GuiTextBoxSetSelection(int start, int length);           // Set selection of active textbox
RAYGUIDEF Vector2 GuiTextBoxGetSelection(void);                         // Get selection of active textbox (x - selection start  y - selection length)
RAYGUIDEF bool GuiTextBoxIsActive(Rectangle bounds);                    // Returns true if a textbox control with specified `bounds` is the active textbox
RAYGUIDEF GuiTextBoxState GuiTextBoxGetState(void);                     // Get state for the active textbox
RAYGUIDEF void GuiTextBoxSetState(GuiTextBoxState state);               // Set state for the active textbox (state must be valid else things will break)
RAYGUIDEF void GuiTextBoxSelectAll(const char *text);                   // Select all characters in the active textbox (same as pressing `CTRL` + `A`)
RAYGUIDEF void GuiTextBoxCopy(const char *text);                        // Copy selected text to clipboard from the active textbox (same as pressing `CTRL` + `C`)
RAYGUIDEF void GuiTextBoxPaste(char *text, int textSize);               // Paste text from clipboard into the textbox (same as pressing `CTRL` + `V`)
RAYGUIDEF void GuiTextBoxCut(char *text);                               // Cut selected text in the active textbox and copy it to clipboard (same as pressing `CTRL` + `X`)
RAYGUIDEF int GuiTextBoxDelete(char *text, int length, bool before);    // Deletes a character or selection before from the active textbox (depending on `before`). Returns bytes deleted.
RAYGUIDEF int GuiTextBoxGetByteIndex(const char *text, int start, int from, int to); // Get the byte index for a character starting at position `from` with index `start` until position `to`.

// Container/separator controls, useful for controls organization
RAYGUIDEF bool GuiWindowBox(Rectangle bounds, const char *text);                                        // Window Box control, shows a window that can be closed
RAYGUIDEF void GuiGroupBox(Rectangle bounds, const char *text);                                         // Group Box control with title name
RAYGUIDEF void GuiLine(Rectangle bounds, const char *text);                                             // Line separator control, could contain text
RAYGUIDEF void GuiPanel(Rectangle bounds);                                                              // Panel control, useful to group controls
RAYGUIDEF Rectangle GuiScrollPanel(Rectangle bounds, Rectangle content, Vector2 *scroll);               // Scroll Panel control

// Basic controls set
RAYGUIDEF void GuiLabel(Rectangle bounds, const char *text);                                            // Label control, shows text
RAYGUIDEF bool GuiButton(Rectangle bounds, const char *text);                                           // Button control, returns true when clicked
RAYGUIDEF bool GuiLabelButton(Rectangle bounds, const char *text);                                      // Label button control, show true when clicked
RAYGUIDEF bool GuiImageButton(Rectangle bounds, Texture2D texture);                                     // Image button control, returns true when clicked
RAYGUIDEF bool GuiImageButtonEx(Rectangle bounds, Texture2D texture, Rectangle texSource, const char *text);        // Image button extended control, returns true when clicked
RAYGUIDEF bool GuiToggle(Rectangle bounds, const char *text, bool active);                              // Toggle Button control, returns true when active
RAYGUIDEF int GuiToggleGroup(Rectangle bounds, const char *text, int active);                           // Toggle Group control, returns active toggle index
RAYGUIDEF bool GuiCheckBox(Rectangle bounds, const char *text, bool checked);                           // Check Box control, returns true when active
RAYGUIDEF int GuiComboBox(Rectangle bounds, const char *text, int active);                              // Combo Box control, returns selected item index
RAYGUIDEF bool GuiDropdownBox(Rectangle bounds, const char *text, int *active, bool editMode);          // Dropdown Box control, returns selected item
RAYGUIDEF bool GuiSpinner(Rectangle bounds, int *value, int minValue, int maxValue, bool editMode);     // Spinner control, returns selected value
RAYGUIDEF bool GuiValueBox(Rectangle bounds, int *value, int minValue, int maxValue, bool editMode);    // Value Box control, updates input text with numbers
RAYGUIDEF bool GuiTextBox(Rectangle bounds, char *text, int textSize, bool editMode);                   // Text Box control, updates input text
RAYGUIDEF bool GuiTextBoxMulti(Rectangle bounds, char *text, int textSize, bool editMode);              // Text Box control with multiple lines
RAYGUIDEF float GuiSlider(Rectangle bounds, const char *text, float value, float minValue, float maxValue, bool showValue);       // Slider control, returns selected value
RAYGUIDEF float GuiSliderBar(Rectangle bounds, const char *text, float value, float minValue, float maxValue, bool showValue);    // Slider Bar control, returns selected value
RAYGUIDEF float GuiProgressBar(Rectangle bounds, const char *text, float value, float minValue, float maxValue, bool showValue);  // Progress Bar control, shows current progress value
RAYGUIDEF void GuiStatusBar(Rectangle bounds, const char *text);                                        // Status Bar control, shows info text
RAYGUIDEF void GuiDummyRec(Rectangle bounds, const char *text);                                         // Dummy control for placeholders
RAYGUIDEF int GuiScrollBar(Rectangle bounds, int value, int minValue, int maxValue);                    // Scroll Bar control
RAYGUIDEF Vector2 GuiGrid(Rectangle bounds, float spacing, int subdivs);                                // Grid control

// Advance controls set
RAYGUIDEF bool GuiListView(Rectangle bounds, const char *text, int *active, int *scrollIndex, bool editMode);       // List View control, returns selected list element index
RAYGUIDEF bool GuiListViewEx(Rectangle bounds, const char **text, int count, int *enabled, int *active, int *focus, int *scrollIndex, bool editMode); // List View with extended parameters
RAYGUIDEF int GuiMessageBox(Rectangle bounds, const char *windowTitle, const char *message, const char *buttons);   // Message Box control, displays a message
RAYGUIDEF int GuiTextInputBox(Rectangle bounds, const char *windowTitle, const char *message, char *text, const char *buttons); // Text Input Box control, ask for text
RAYGUIDEF Color GuiColorPicker(Rectangle bounds, Color color);                                          // Color Picker control

// Styles loading functions
RAYGUIDEF void GuiLoadStyle(const char *fileName);              // Load style file (.rgs)
RAYGUIDEF void GuiLoadStyleProps(const int *props, int count);  // Load style properties from array
RAYGUIDEF void GuiLoadStyleDefault(void);                       // Load style default over global style
RAYGUIDEF void GuiUpdateStyleComplete(void);                    // Updates full style properties set with default values



RAYGUIDEF const char *GuiIconText(int iconId, const char *text); // Get text with icon id prepended
"""

class Func(name, returnType, params);

var typeMap = {
    int    -> "i32",
    float  -> "f32",
    double -> "f64",
    short  -> "i16",
    long   -> "i64",
}

var parseParam = def(param) {
    var tokens = param.split(" ")
    if param == "..." || param == "" {
        return param
    }
    
    var type = tokens[0]
    var index = 1
    if type == "const" {        
        type = tokens[1] + " const"
        index += 1
    }
    
    if type == "unsigned" {        
        type = case tokens[1]
                when "char" -> "u8"
                when "int"  -> "u32"
                else "UNKNOWN"
        index += 1
    }
    
    if typeMap.has(type) {
        type = typeMap.get(type)
    }
    
    var name = tokens[index]
    if str:startsWith(name, "**") {
        type += "**"
        name = name.rest(2)
    } else if str:startsWith(name, "*") {
        type += "*"
        name = name.rest(1)
    }
    
    return name + ": " + type
}

var parseFunc = def(line) {
    var tokens = line.split(" ")
    
    // Return Type
    var returnType = tokens[1]
    var index = 2
    if returnType == "const" {
        returnType = tokens[2] + " const"
        index += 1
    }
    
    if returnType == "unsigned" {
        returnType = case tokens[2]
                        when "char" -> "u8"
                        when "int"  -> "u32"
                        else "UNKNOWN:" + tokens[2]
        index += 1
    }
    
    if typeMap.has(returnType) {
        returnType = typeMap.get(returnType)
    }
    
    
    // Function Name
    var funcName = tokens[index]
    if str:startsWith(funcName, "**") {
        returnType += "**"
        funcName = funcName.rest(2)
    } else if str:startsWith(funcName, "*") {
        returnType += "*"
        funcName = funcName.rest(1)
    }
    
    var i = funcName.indexOf("(")
    if i > -1 {
        funcName = funcName.substring(0, i)
    }
    
    
    // Function Params
    var params = []
    var start = line.indexOf("(")
    var end   = line.indexOf(")")
    var rawParams = line.substring(start + 1, end)
    var rawParamTokens = rawParams.split(",")
    //println(rawParamTokens)
    if (rawParamTokens.size() == 1 && rawParamTokens[0].trim() == "void") {
        // skip
    }
    else {        
        rawParamTokens.foreach(def(t) {
           params += parseParam(t.trim())
        })
    }

    return new Func(funcName, returnType, params)
}

input.split("\n").foreach(def(line) {
    line = line.trim()
    if line == "" || str:startsWith(line, "//") {
        return;
    }
    
    var func = parseFunc(line)
    var params = ""
    var isFirst = true
    func.params.foreach(def(p) {
        if !isFirst params += ", "
        params += p
        isFirst = false
    })
    
    printf("@foreign public func %s(%s) : %s;\n", func.name, params, func.returnType);
})

