/*
// Quaternion type, same as Vector4
typedef Vector4 Quaternion;

// Texture type, same as Texture2D
typedef Texture2D Texture;

// TextureCubemap type, actually, same as Texture2D
typedef Texture2D TextureCubemap;

typedef Camera3D Camera;    // Camera type fallback, defaults to Camera3D

// RenderTexture type, same as RenderTexture2D
typedef RenderTexture2D RenderTexture;
#define SpriteFont Font     // SpriteFont type fallback, defaults to Font
// Music type (file streaming from memory)
// NOTE: Anything longer than ~10 seconds should be streamed
typedef struct MusicData *Music;
#define LOC_MAP_DIFFUSE      LOC_MAP_ALBEDO
#define LOC_MAP_SPECULAR     LOC_MAP_METALNESS
#define MAP_DIFFUSE      MAP_ALBEDO
#define MAP_SPECULAR     MAP_METALNESS
*/
var input = """
typedef struct GuiTextBoxState {
    int cursor;      // Cursor position in text
    int start;       // Text start position (from where we begin drawing the text)
    int index;       // Text start index (index inside the text of `start` always in sync)
    int select;      // Marks position of cursor when selection has started
} GuiTextBoxState;

// Gui control state
typedef enum {
    GUI_STATE_NORMAL = 0,
    GUI_STATE_FOCUSED,
    GUI_STATE_PRESSED,
    GUI_STATE_DISABLED,
} GuiControlState;

// Gui control text alignment
typedef enum {
    GUI_TEXT_ALIGN_LEFT = 0,
    GUI_TEXT_ALIGN_CENTER,
    GUI_TEXT_ALIGN_RIGHT,
} GuiTextAlignment;

// Gui controls
typedef enum {
    DEFAULT = 0,
    LABEL,          // LABELBUTTON
    BUTTON,         // IMAGEBUTTON
    TOGGLE,         // TOGGLEGROUP
    SLIDER,         // SLIDERBAR
    PROGRESSBAR,
    CHECKBOX,
    COMBOBOX,
    DROPDOWNBOX,
    TEXTBOX,        // TEXTBOXMULTI
    VALUEBOX,
    SPINNER,
    LISTVIEW,
    COLORPICKER,
    SCROLLBAR,
    RESERVED
} GuiControl;

// Gui base properties for every control
typedef enum {
    BORDER_COLOR_NORMAL = 0,
    BASE_COLOR_NORMAL,
    TEXT_COLOR_NORMAL,
    BORDER_COLOR_FOCUSED,
    BASE_COLOR_FOCUSED,
    TEXT_COLOR_FOCUSED,
    BORDER_COLOR_PRESSED,
    BASE_COLOR_PRESSED,
    TEXT_COLOR_PRESSED,
    BORDER_COLOR_DISABLED,
    BASE_COLOR_DISABLED,
    TEXT_COLOR_DISABLED,
    BORDER_WIDTH,
    INNER_PADDING,
    TEXT_ALIGNMENT,
    RESERVED02
} GuiControlProperty;

// Gui extended properties depend on control
// NOTE: We reserve a fixed size of additional properties per control

// DEFAULT properties
typedef enum {
    TEXT_SIZE = 16,
    TEXT_SPACING,
    LINE_COLOR,
    BACKGROUND_COLOR,
} GuiDefaultProperty;

// Label
//typedef enum { } GuiLabelProperty;

// Button
//typedef enum { } GuiButtonProperty;

// Toggle / ToggleGroup
typedef enum {
    GROUP_PADDING = 16,
} GuiToggleProperty;

// Slider / SliderBar
typedef enum {
    SLIDER_WIDTH = 16,
    TEXT_PADDING
} GuiSliderProperty;

// ProgressBar
//typedef enum { } GuiProgressBarProperty;

// CheckBox
typedef enum {
    CHECK_TEXT_PADDING = 16
} GuiCheckBoxProperty;

// ComboBox
typedef enum {
    SELECTOR_WIDTH = 16,
    SELECTOR_PADDING
} GuiComboBoxProperty;

// DropdownBox
typedef enum {
    ARROW_RIGHT_PADDING = 16,
} GuiDropdownBoxProperty;

// TextBox / TextBoxMulti / ValueBox / Spinner
typedef enum {
    MULTILINE_PADDING = 16,
    COLOR_SELECTED_FG,
    COLOR_SELECTED_BG
} GuiTextBoxProperty;

typedef enum {
    SELECT_BUTTON_WIDTH = 16,
    SELECT_BUTTON_PADDING,
    SELECT_BUTTON_BORDER_WIDTH
} GuiSpinnerProperty;

// ScrollBar
typedef enum {
    ARROWS_SIZE = 16,
    SLIDER_PADDING,
    SLIDER_SIZE,
    SCROLL_SPEED,
    ARROWS_VISIBLE
} GuiScrollBarProperty;

// ScrollBar side
typedef enum {
    SCROLLBAR_LEFT_SIDE = 0,
    SCROLLBAR_RIGHT_SIDE
} GuiScrollBarSide;

// ListView
typedef enum {
    ELEMENTS_HEIGHT = 16,
    ELEMENTS_PADDING,
    SCROLLBAR_WIDTH,
    SCROLLBAR_SIDE,             // This property defines vertical scrollbar side (SCROLLBAR_LEFT_SIDE or SCROLLBAR_RIGHT_SIDE)
} GuiListViewProperty;

// ColorPicker
typedef enum {
    COLOR_SELECTOR_SIZE = 16,
    BAR_WIDTH,                  // Lateral bar width
    BAR_PADDING,                // Lateral bar separation from panel
    BAR_SELECTOR_HEIGHT,        // Lateral bar selector height
    BAR_SELECTOR_PADDING        // Lateral bar selector outer padding
} GuiColorPickerProperty;
"""

var typeMap = {
    int    -> "i32",
    float  -> "f32",
    double -> "f64",
    short  -> "i16",
    long   -> "i64",
}

var parseType = def(param) {
    var tokens = param.split(" ")
    if param == "..." || param == "" {
        return param
    }
    
    var type = tokens[0]
    var index = 1
    if type == "const" {        
        type = tokens[1] + " const"
        index += 1
    }
    
    if type == "unsigned" {        
        type = case tokens[1]
                when "char"  -> "u8"
                when "int"   -> "u32"
                when "short" -> "u16"
                else "UNKNOWN"
        index += 1
    }
    
    if typeMap.has(type) {
        type = typeMap.get(type)
    }
    
    var name = tokens[index]
    if str:startsWith(name, "**") {
        type += "**"
        name = name.rest(2)
    } else if str:startsWith(name, "*") {
        type += "*"
        name = name.rest(1)
    }
    
    if str:endsWith(name, ";") {
        name = name.substring(0, length(name) - 1)
    }
    
    if name.contains("[") {
        var arr = name.substring(name.indexOf("["), name.indexesOf("]").last() + 1)
        name = name.substring(0, name.indexOf("["))
        type = arr + type
    }
    
    return name + ": " + type
}



var aggregates = []
var current = []

input.split("\n").foreach(def(line) {
    line = line.trim()
    if line == "" || str:startsWith(line, "//") {
        return;
    }

    current += line

    if str:startsWith(line, "}") {
        aggregates += current
        current = []
        return;
    }
})

var parseStruct = def(agg) {
    var name = agg[length(agg) - 1]
    name = name.substring(1, name.length() - 1).trim()
    
    var out = "@foreign public struct " + name + " {\n"
    agg.slice(1, length(agg)-1).foreach(def(l) {       
        var e = parseType(l)
        out += "    " + e + "\n"
    })
    
    out += "}\n"
    
    return out
}

var parseEnum = def(agg) {
    var name = agg[length(agg) - 1]
    name = name.substring(1, name.length() - 1).trim()
    
    var out = "@foreign public enum " + name + " {\n"
    agg.slice(1, length(agg)-1).foreach(def(l) {
        out += "    " + l + "\n"
    })
    
    out += "}\n"
    
    return out
}

println("Total: " + aggregates.size())
aggregates.foreach(def(agg) {
    //println("Agg: " + agg[0])
    var type = agg[0].split(" ")[1]
    var output = case type 
                    when "struct" -> parseStruct(agg)
                    when "enum"   -> parseEnum(agg)
                    else "ERROR unknown type: " + type
    println(output)
})


